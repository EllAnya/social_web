// –ù–∏–∑–∞ —Å–æ –∞–ø–ª–æ–∞–¥–∏—Ä–∞–Ω–∏ —Å–ª–∏–∫–∏ –∑–∞ –Ω–æ–≤ –ø–æ—Å—Ç
let uploadedImages = [];

// –§—É–Ω–∫—Ü–∏—ò–∞ –∑–∞ –∞–ø–ª–æ–∞–¥–∏—Ä–∞–∞—ö–µ –Ω–∞ —Å–ª–∏–∫–∏
document.getElementById("upload-image-input").addEventListener("change", readFileImage);
function readFileImage() {
    if (this.files && this.files[0]) {
        let image = new FileReader();

        image.addEventListener("load", function(element) {
            // Base64 –∫–æ–¥ (—Å—Ç—Ä–∏–Ω–≥) –æ–¥ –∞–ø–ª–æ–∞–¥–∏—Ä–∞–Ω–∞—Ç–∞ —Å–ª–∏–∫–∞ —Å–µ –¥–æ–¥–∞–≤–∞ –≤–æ –Ω–∏–∑–∞
            uploadedImages.push(element.target.result);

            // –°–µ –ø—Ä–µ–±—Ä–∏—à—É–≤–∞–∞—Ç –ø—Ä–µ—Ç—Ö–æ–¥–Ω–∏—Ç–µ –ø—Ä–∏–∫–∞–∂–∞–Ω–∏ —Å–ª–∏–∫–∏
            let imagesPreview = document.getElementById("post-images-preview");
            imagesPreview.innerHTML = "";

            // –û–¥ –Ω–æ–≤–æ —Å–µ –ø—Ä–∏–∫–∞–∂—É–≤–∞–∞—Ç —Å–ª–∏—Ç–µ —Å–ª–∏–∫–∏ –æ–¥ –Ω–∏–∑–∞—Ç–∞ + –Ω–æ–≤–∞—Ç–∞ –∞–ø–ª–æ–∞–¥–∏—Ä–∞–Ω–∞ —Å–ª–∏–∫–∞
            uploadedImages.forEach((image, index) => {
                imagesPreview.innerHTML += `<img src="${image}" id="uploaded-image">`
            });
        });

        image.readAsDataURL(this.files[0]);
    };
};



// –ù–∏–∑–∞ –æ–¥ –ø–æ—Å—Ç–æ–≤–∏
let postList = [
    {
        authorName: "Jaylee Montes",
        authorAvatar: "https://i.ibb.co/VqWkzBR/img-avatar2.png",
        postDescription: "Front-end web development, also known as client-side development is the practice of producing HTML, CSS and JavaScript for a website or Web Application so that a user can see and interact with them directly.",
        postImage: ["https://i.ibb.co/zJr1j7P/post-4.webp", "https://i.ibb.co/nQBX35F/post-5.jpg", "https://i.ibb.co/SrQynTh/post-3.jpg", "https://i.ibb.co/bvHd7cb/post-2.jpg", "https://i.ibb.co/DW0H5vn/post-1.jpg"],
        timeAgo: "1 min ago",
        comments: [
            {
                commentAuthorName: "Quinn Harrell",
                commentAuthorAvatar: "https://i.ibb.co/25XPzNF/img-avatar4.png",
                commentContent: "I like this post.",
                commentTimeAgo: "2 mins ago",
            },
            {
                commentAuthorName: "Thomas Mcconnell",
                commentAuthorAvatar: "https://i.ibb.co/HXF4mCF/img-avatar3.png",
                commentContent: "Thank you for your post",
                commentTimeAgo: "5 mins ago"
            }
        ]
    },
    {
        authorName: "Thomas Mcconnell",
        authorAvatar: "https://i.ibb.co/HXF4mCF/img-avatar3.png",
        postDescription: "In this week post I will show you how to make parallax effect and use it to tell story in website. Parallax is must know skill for every frontend developer because it can be used for different type of cases in websites. Mostly it is used tell story with graphics‚Ä¶ üòé üòÅ",
        postImage: [],
        timeAgo: "1 min ago",
        comments: []
    },
    {
        authorName: "Quinn Harrell",
        authorAvatar: "https://i.ibb.co/25XPzNF/img-avatar4.png",
        postDescription: "Everything you need to know in a simple path to get hired fast. This video is the second part of my Web Development series. In the first part, we covered 5 facts about web development.",
        postImage: ["https://i.ibb.co/DW0H5vn/post-1.jpg"],
        timeAgo: "1 min ago",
        comments: []
    }
];


// –ó–∞—á—É–≤–∞—ò –Ω–æ–≤ –ø–æ—Å—Ç
function savePost() {
    // –ö—Ä–µ–∏—Ä–∞—ò –Ω–æ–≤ –æ–±—ò–µ–∫—Ç, –∏ –Ω–∞ –Ω–∞–ø–æ–ª–Ω–∏ –≥–æ —Å–æ –ø–æ–¥–∞—Ç–æ—Ü–∏—Ç–µ –∑–∞ –Ω–æ–≤ –ø–æ—Å—Ç
    let newPost = {
        authorName: "Dejan Veselinoski",
        authorAvatar: "https://i.ibb.co/0rBBqbZ/image.png",
        postDescription: document.getElementById("post-textarea").value,
        postImage: uploadedImages,
        timeAgo: "1 min ago",
        comments: []
    };

    // –¥–æ–¥–∞–¥–∏ –≥–æ –Ω–æ–≤–∏–æ—Ç –ø–æ—Å—Ç –Ω–∞ 1-–≤–æ –º–µ—Å—Ç–æ
    postList.unshift(newPost);

    // –∏–∑–±—Ä–∏—à–∏ –≥–∏ –ø—Ä–µ—Ç—Ö–æ–¥–Ω–∏—Ç–µ –ø–æ—Å—Ç–æ–≤–∏
    document.getElementById("postSection").innerHTML = "";
    // –≤—á–∏—Ç–∞—ò –≥–∏ –æ–¥ –Ω–æ–≤–æ —Å–∏—Ç–µ –ø–æ—Å—Ç–æ–≤–∏ –≤–æ –Ω–∏–∑–∞—Ç–∞ + –Ω–æ–≤–∏–æ—Ç –¥–æ–¥–∞–¥–µ–Ω –ø–æ—Å—Ç
    loadPosts();
    // –∏—Å—á–∏—Å—Ç–∏ —ò–∞ textarea-—Ç–∞ –æ—Ç–∫–∞–∫–æ –ø–æ—Å—Ç–æ—Ç –µ –∫—Ä–µ–∏—Ä–∞–Ω
    document.getElementById("post-textarea").value = "";
    uploadedImages = [];
    // –∏–∑–±—Ä–∏—à–∏ –≥–∏ –∞–ø–ª–æ–∞–¥–∏—Ä–∞–Ω–∏—Ç–µ —Å–ª–∏–∫–∏ –æ—Ç–∫–∞–∫–æ –ø–æ—Å—Ç–æ—Ç –µ –∫—Ä–µ–∏—Ä–∞–Ω
    document.getElementById("post-images-preview").innerHTML = "";
};


// –ö—Ä–µ–∏—Ä–∞—ò HTML –∑–∞ —Å–µ–∫–æ—ò –ø–æ—Å—Ç –æ–¥ –Ω–∏–∑–∞—Ç–∞ postList
function loadPosts() {
    let section = document.getElementById("postSection");

    // –ó–∞ —Å–µ–∫–æ—ò –ø–æ—Å—Ç –≤–æ –Ω–∏–∑–∞—Ç–∞ –∫—Ä–µ–∏—Ä–∞—ò HTML
    postList.forEach((post, index) => {
        section.innerHTML += 
        `<article class="article-block">
            <span class="post-time">${post.timeAgo}</span>

            <img class="author-avatar" src="${post.authorAvatar}">
            <p class="author-name">${post.authorName}</p>
            <p class="central-text">${post.postDescription}</p>
            <div class="post-images">
                ${dividePostImages(post.postImage, index)}
            </div>
            <br>
            <button class="article-reactions"><i class="fa-regular fa-thumbs-up"></i></button>
            <button class="article-reactions" onclick="showCommentArea(${index})"><i class="fa-solid fa-comment"></i></button>

            <textarea id="comment-area${index}" class="comment-area" placeholder="Add your comment"></textarea>
            <button id="comment-button${index}" class="send-comment" onclick="addNewComment(${index})">Send</button>

            <div class="comments-area" id="comment-holder${index}">
                <p class="comments-label">Comments</p>
                
                ${createCommentsHTML(post.comments)}
            </div>
        </article>`
    });
};

function createCommentsHTML(comments) {
    let commentList = '';
    
    comments.forEach(element => {
        commentList += 
        `<div id="comment">
                <img src="${element.commentAuthorAvatar}" class="comment-avatar">
                <div class="comment-info">
                    <p class="comment-author">${element.commentAuthorName}</p>
                    <p class="comment-content">${element.commentContent}</p>
                    <p class="comment-timeago">${element.commentTimeAgo}</p>
                </div>
         </div>
        `;
    });

    return commentList;
}


// –°–ø–æ—Ä–µ–¥ –±—Ä–æ—ò–æ—Ç –Ω–∞ —Å–ª–∏–∫–∏ –∑–∞ —Å–µ–∫–æ—ò –ø–æ—Å—Ç, –∫—Ä–µ–∏—Ä–∞—ò —Å–æ–æ–¥–≤–µ—Ç–µ–Ω HTML 
// –§—É–Ω–∫—Ü–∏—ò–∞—Ç–∞ –æ—á–µ–∫—É–≤–∞ 2 –≤–ª–µ–∑–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ —Å–µ–∫–æ—ò –ø–æ—Å—Ç, –ø—Ä–≤–∏–æ—Ç –µ –Ω–∏–∑–∞—Ç–∞ —Å–æ —Å–ª–∏–∫–∏ –æ–¥ –ø–æ—Å—Ç–æ—Ç, –≤—Ç–æ—Ä–∏–æ—Ç –µ –∏–Ω–¥–µ–∫—Å–æ—Ç –Ω–∞ –ø–æ—Å—Ç–æ—Ç
function dividePostImages(niza, index) {
    let images;

    if (niza.length == 1) {
        images = `<div class="post-imagew-100 h-300" style="background-image: url(${niza[0]});" onclick="showFullSizeImage(${index}, 0)"></div>`;
    }
    else 
    if (niza.length == 2) {
        images = `<div class="post-image w-50 h-300" style="background-image: url(${niza[0]});" onclick="showFullSizeImage(${index}, 0)"></div>
                  <div class="post-image w-50 h-300" style="background-image: url(${niza[1]});" onclick="showFullSizeImage(${index}, 1)"></div>`;
    } 
    else
    if (niza.length == 3) {
        images = `<div class="post-image w-50 h-300" style="background-image: url(${niza[0]});" onclick="showFullSizeImage(${index}, 0)"></div>
                  <div class="w-50 h-300 float-l">
                    <div class="post-image w-100 h-150" style="background-image: url(${niza[1]});" onclick="showFullSizeImage(${index}, 1)"></div>
                    <div class="post-image w-100 h-150" style="background-image: url(${niza[2]});" onclick="showFullSizeImage(${index}, 2)"></div>
                  </div>`;
    }
    else
    if (niza.length == 4) {
        images = `<div class="post-image w-50 h-300" style="background-image: url(${niza[0]});" onclick="showFullSizeImage(${index}, 0)"></div>
                  <div class="w-50 h-300 float-l">
                    <div class="post-image w-100 h-150" style="background-image: url(${niza[1]});" onclick="showFullSizeImage(${index}, 1)"></div>
                    <div class="w-100 h-150">
                        <div class="post-image w-50 h-150" style="background-image: url(${niza[2]});" onclick="showFullSizeImage(${index}, 2)"></div>
                        <div class="post-image w-50 h-150" style="background-image: url(${niza[3]});" onclick="showFullSizeImage(${index}, 3)"></div>
                    </div>
                  </div>`;
    } 
    else
    if (niza.length > 4) {
        images = `<div class="post-image w-50 h-300" style="background-image: url(${niza[0]});" onclick="showFullSizeImage(${index}, 0)"></div>
                  <div class="w-50 h-300 float-l">
                    <div class="post-image w-100 h-150" style="background-image: url(${niza[1]});" onclick="showFullSizeImage(${index}, 1)"></div>
                    <div class="w-100 h-150">
                        <div class="post-image w-50 h-150" style="background-image: url(${niza[2]});" onclick="showFullSizeImage(${index}, 2)"></div>
                        <div class="post-image w-50 h-150" style="background-image: url(${niza[3]});" onclick="showFullSizeImage(${index}, 3)">
                            <div class="post-image-overlay">+ ${niza.length - 4}</div>
                        </div>
                    </div>
                  </div>`;
    }
    else {
        images = '';
    }

    return images;
};


// –ü—Ä–∏–∫–∞–∂–∏ —Å–ª–∏–∫–∞ –Ω–∞ –ø–æ—Å—Ç –≤–æ full –≥–æ–ª–µ–º–∏–Ω–∞
// –§—É–Ω–∫—Ü–∏—ò–∞—Ç–∞ –æ—á–µ–∫—É–≤–∞ 2 –≤–ª–µ–∑–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, 
// –ü—Ä–≤–∏–æ—Ç –µ –∏–Ω–¥–µ–∫—Å–æ—Ç –Ω–∞ –ø–æ—Å—Ç–æ—Ç, –≤—Ç–æ—Ä–∏–æ—Ç –µ –∏–Ω–¥–µ–∫—Å–æ—Ç –Ω–∞ –∫–ª–∏–∫–Ω–∞—Ç–∞—Ç–∞ —Å–ª–∏–∫–∞ —à—Ç–æ —Ç—Ä–µ–±–∞ –¥–∞ —Å–µ –ø—Ä–∏–∫–∞–∂–µ –ø—Ä–≤–∞ –Ω–∞ carousel-–æ—Ç
function showFullSizeImage(postIndex, imageIndex) {

    // –û—Ç–≤–æ—Ä–∏ –≥–æ bootstrap modal-–æ—Ç
    var myModal = new bootstrap.Modal(document.getElementById("imageModal"), {});
    myModal.show();

    let carouselInner = document.getElementById("carousel-inner");

    // –î–æ–∫–æ–ª–∫—É –ø—Ä–µ—Ç—Ö–æ–¥–Ω–æ —Å–º–µ –ø—Ä–∏–∫–∞–∂–∞–ª–µ –¥—Ä—É–≥–∏ —Å–ª–∏–∫–∏, –∏–∑–±—Ä–∏—à–∏ –≥–∏ –æ–¥ carousel-–æ—Ç
    carouselInner.innerHTML = "";

    // –°–ø–æ—Ä–µ–¥ –∏–Ω–¥–µ–∫—Å–æ—Ç –Ω–∞ –ø–æ—Å—Ç–æ—Ç, –∏–∑–≤–ª–µ—á–∏ –≥–∏ –Ω–µ–≥–æ–≤–∏—Ç–µ —Å–ª–∏–∫–∏ –æ–¥ –Ω–∏–∑–∞—Ç–∞ —Å–æ –ø–æ—Å—Ç–æ–≤–∏, –∏ –¥–æ–¥–µ–ª–∏ –≥–∏ –Ω–∞ –Ω–æ–≤–∞ –ª–æ–∫–∞–ª–Ω–∞ –Ω–∏–∑–∞
    let postImages = postList[postIndex].postImage;

    // –ö—Ä–µ–∏—Ä–∞—ò HTML –≤–æ carousel-–æ—Ç –∑–∞ —Å–µ–∫–æ—ò–∞ —Å–ª–∏–∫–∞ –≤–æ –Ω–∏–∑–∞—Ç–∞
    postImages.forEach((image, i) => {
        carouselInner.innerHTML += 
        `<div class="carousel-item ${i == imageIndex ? 'active' : ''}">
            <img src="${image}" class="d-block w-100">
        </div>`;
    });
}

// –ü—Ä–∏–∫–∞–∂–∏ –≥–æ –ø–æ–ª–µ—Ç–æ –∑–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä –Ω–∞ —Å–æ–æ–¥–≤–µ—Ç–µ–Ω –ø–æ—Å—Ç ( –æ—á–µ–∫—É–≤–∞ –∏–Ω–¥–µ–∫—Å –Ω–∞ –ø–æ—Å—Ç –∫–∞–∫–æ –≤–ª–µ–∑–µ–Ω –ø–∞—Ä–∞–º–µ—Ça—Ä)
function showCommentArea(postIndex) {
    document.getElementById("comment-area"+ postIndex).style.display = "block";
    document.getElementById("comment-button"+ postIndex).style.display = "block";
    document.getElementById("comment-holder"+ postIndex).style.display = "block";
}


function addNewComment(postIndex) {

    let newCommentObj = {
        commentAuthorName : "Dejan Veselinoski",
        commentAuthorAvatar : "https://i.postimg.cc/C5GQxQJC/img-avatar.png",
        commentContent : document.getElementById("comment-area" + postIndex).value,
        commentTimeAgo : '1 min ago'
    };

    postList[postIndex].comments.unshift(newCommentObj);
    
    let commentsHolder = document.getElementById("comment-holder" + postIndex);
    commentsHolder.innerHTML = 
    `<p class="comments-label">Comments</p>
            
     ${createCommentsHTML(postList[postIndex].comments)}
    `;

    document.getElementById("comment-area" + postIndex).value = "";
}